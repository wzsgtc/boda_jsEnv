"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _combinator = _interopRequireDefault(require("./combinator"));

var _unsupported_exception = _interopRequireDefault(require("./unsupported_exception"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Selector = /*#__PURE__*/function () {
  function Selector(adapter) {
    _classCallCheck(this, Selector);

    this.adapter = adapter;
    this.simpleSelector = new SimpleSelector(adapter);
    this.combinator = new _combinator["default"](adapter);
  }

  _createClass(Selector, [{
    key: "select",
    value: function select(expression, element) {
      var _this = this;

      // handle groups of selectors
      var expressions = this.groupSelectorExpressionSplit(expression);
      var selectedElements = [];
      expressions.forEach(function (e) {
        selectedElements = selectedElements.concat(_this.nonGroupSelect(e, element));
      });
      return selectedElements;
    }
  }, {
    key: "nonGroupSelect",
    value: function nonGroupSelect(expression, element) {
      expression = expression.trim();
      var selectedElements = []; // get all descendants as candidates

      var candidates = this.adapter.descendants(element);
      var start = 0;
      var idx = 0;
      var pivotLetter = 0;

      while (idx < expression.length) {
        var c = expression[idx];

        if (c == '>') {
          candidates = this.combinatorSlice(expression.slice(start, idx), expression[idx], candidates);
          pivotLetter = expression[idx];
          start = idx + 1;
        } else if (c == '+') {
          candidates = this.combinatorSlice(expression.slice(start, idx), expression[idx], candidates);
          pivotLetter = expression[idx];
          start = idx + 1;
        } else if (c == '~') {
          candidates = this.combinatorSlice(expression.slice(start, idx), expression[idx], candidates);
          pivotLetter = expression[idx];
          start = idx + 1;
        } else if (c == '[' || c == '(') {
          pivotLetter = expression[idx];
        } else if (c == ']' || c == ')') {
          pivotLetter = 0;
        } else if (c.match(/\s/) && expression[idx + 1].match(/[a-zA-Z#.\[:]/)) {
          if (pivotLetter == 0) {
            candidates = this.combinatorSlice(expression.slice(start, idx), expression[idx], candidates);
            pivotLetter = expression[idx];
            start = idx + 1;
          } else if ("[(".indexOf(pivotLetter) >= 0) {
            pivotLetter = 0;
          }
        }

        ++idx;
      }

      if (start < idx && expression.slice(start, idx).trim().length > 0) {
        candidates = this.combinatorSlice(expression.slice(start, idx), 0, candidates);
      }

      return candidates;
    }
  }, {
    key: "combinatorSlice",
    value: function combinatorSlice(expr, letter, candidates) {
      var _this2 = this;

      expr = expr.trim();
      var selected = [];
      candidates.forEach(function (c) {
        if (_this2.simpleSelector.match(expr, c)) {
          selected.push(c);
        }
      });

      switch (letter) {
        case '>':
          candidates = this.combinator.child(selected);
          break;

        case '+':
          candidates = this.combinator.nextSibling(selected);
          break;

        case '~':
          candidates = this.combinator.subsequentSibling(selected);
          break;

        case ' ':
          candidates = this.combinator.descendant(selected);
          break;

        default:
          candidates = selected;
          break;
      }

      return candidates;
    }
  }, {
    key: "groupSelectorExpressionSplit",
    value: function groupSelectorExpressionSplit(expression) {
      return expression.split(",");
    }
  }]);

  return Selector;
}(); // The simple selector here is the "sequence of simple selectors" defined in CSS3 https://www.w3.org/TR/selectors-3/#selector-syntax


exports["default"] = Selector;

var SimpleSelector = /*#__PURE__*/function () {
  function SimpleSelector(adapter) {
    _classCallCheck(this, SimpleSelector);

    this.adapter = adapter;
  }

  _createClass(SimpleSelector, [{
    key: "match",
    value: function match(expression, element) {
      var expressions = this.atomExpressionSplit(expression);
      var candidates = [];
      var isMatch = true;

      for (var i = 0; i < expressions.length; ++i) {
        isMatch = expressions[i].match(element);

        if (!isMatch) {
          break;
        }
      }

      return isMatch;
    }
  }, {
    key: "atomExpressionSplit",
    value: function atomExpressionSplit(expression) {
      var expressions = [];
      var last = 0;

      for (var i = 0; i < expression.length; ++i) {
        var c = expression.charAt(i);

        if (c == '*') {
          //universal selector
          expressions.push(new UniversalSelector(this.adapter, expr));
        } else if (c.match(/[a-zA-Z]/g)) {
          var expr = this.getNext(expression, i);
          expressions.push(new TypeSelector(this.adapter, expr));
          i = i + expr.length - 1;
        } else if (c == '[') {
          // beginning of atrribute selector
          var end = expression.indexOf("]", i);
          expressions.push(new AttributeSelector(this.adapter, expression.slice(i, end + 1)));
          i = end;
        } else if (c == ':') {
          // pseudo-class selector
          var sub = expression.slice(i);
          var end = sub.search(/\W/);

          if (sub[end] == '(') {
            end = sub.indexOf(")", end);
          }

          expressions.push(new PseudoClassSelector(this.adapter, expression.slice(i, i + end).trim()));
          i = end - 1;
        } else if (c == '.') {
          // class selector
          var expr = this.getNext(expression, i);
          expressions.push(new ClassSelector(this.adapter, expr));
          i = i + expr.length - 1;
        } else if (c == '#') {
          // ID selector
          var expr = this.getNext(expression, i);
          expressions.push(new IDSelector(this.adapter, expr));
          i = i + expr.length - 1;
        }
      }

      return expressions;
    }
  }, {
    key: "getNext",
    value: function getNext(expression, start) {
      var sub = expression.slice(start + 1);
      var end = sub.search(/\W/g); // end is index of sub

      if (end == -1) {
        end = sub.length;
      }

      return expression.slice(start, start + end + 1).trim();
    }
  }]);

  return SimpleSelector;
}(); // The AtomSelector is the "simple selector" defined in CSS3 https://www.w3.org/TR/selectors-3/#selectors


var AtomSelector = function AtomSelector(adapter, expression) {
  _classCallCheck(this, AtomSelector);

  this.adapter = adapter;
  this.expression = expression;
};

var UniversalSelector = /*#__PURE__*/function (_AtomSelector) {
  _inherits(UniversalSelector, _AtomSelector);

  var _super = _createSuper(UniversalSelector);

  function UniversalSelector(adapter, expression) {
    _classCallCheck(this, UniversalSelector);

    return _super.call(this, adapter, expression);
  }

  _createClass(UniversalSelector, [{
    key: "match",
    value: function match(element) {
      return this.adapter.isTagElement(element);
    }
  }]);

  return UniversalSelector;
}(AtomSelector);

var TypeSelector = /*#__PURE__*/function (_AtomSelector2) {
  _inherits(TypeSelector, _AtomSelector2);

  var _super2 = _createSuper(TypeSelector);

  function TypeSelector(adapter, expression) {
    _classCallCheck(this, TypeSelector);

    return _super2.call(this, adapter, expression);
  }

  _createClass(TypeSelector, [{
    key: "match",
    value: function match(element) {
      if (!this.adapter.isTagElement(element)) return false;
      return this.expression == this.adapter.name(element);
    }
  }]);

  return TypeSelector;
}(AtomSelector);

var AttributeSelector = /*#__PURE__*/function (_AtomSelector3) {
  _inherits(AttributeSelector, _AtomSelector3);

  var _super3 = _createSuper(AttributeSelector);

  function AttributeSelector(adapter, expression) {
    var _this3;

    _classCallCheck(this, AttributeSelector);

    _this3 = _super3.call(this, adapter, expression);
    _this3.attr = null;
    _this3.val = null;

    _this3.processExpression(expression);

    return _this3;
  }

  _createClass(AttributeSelector, [{
    key: "processExpression",
    value: function processExpression(expression) {
      var idx = expression.indexOf('[');
      expression = expression.slice(idx + 1);
      idx = expression.lastIndexOf(']');
      expression = expression.slice(0, idx);
      idx = expression.indexOf("=");

      if (idx > 0 && expression[idx - 1].match(/\w/) == null) {
        throw new _unsupported_exception["default"](expression.slice(idx - 1, idx + 1) + " is not supported");
      }

      if (idx < 0) {
        // [attr]
        this.attr = expression;
      } else {
        this.attr = expression.slice(0, idx);
        this.val = expression.slice(idx + 1).replace(/\"/g, "");
      }

      this.expression = expression;
    }
  }, {
    key: "match",
    value: function match(element) {
      if (!this.adapter.isTagElement(element)) return false;

      if (this.val == null) {
        var attrs = this.adapter.attributes(element);
        if (!attrs) return false;
        return this.attr in attrs;
      }

      var attrs = this.adapter.attributes(element);
      if (!(this.attr in attrs)) return false;
      return attrs[this.attr] == this.val;
    }
  }]);

  return AttributeSelector;
}(AtomSelector);

var ClassSelector = /*#__PURE__*/function (_AtomSelector4) {
  _inherits(ClassSelector, _AtomSelector4);

  var _super4 = _createSuper(ClassSelector);

  function ClassSelector(adapter, expression) {
    var _this4;

    _classCallCheck(this, ClassSelector);

    _this4 = _super4.call(this, adapter, expression);

    _this4.processExpression(expression);

    return _this4;
  }

  _createClass(ClassSelector, [{
    key: "processExpression",
    value: function processExpression(expression) {
      var idx = expression.indexOf('.');
      this.expression = expression.slice(idx + 1);
    }
  }, {
    key: "match",
    value: function match(element) {
      if (!this.adapter.isTagElement(element)) return false;
      var c = this.adapter.attributes(element)["class"];
      if (!c) return false;
      var classes = c.split(" ");
      return classes.indexOf(this.expression) >= 0;
    }
  }]);

  return ClassSelector;
}(AtomSelector);

var IDSelector = /*#__PURE__*/function (_AtomSelector5) {
  _inherits(IDSelector, _AtomSelector5);

  var _super5 = _createSuper(IDSelector);

  function IDSelector(adapter, expression) {
    var _this5;

    _classCallCheck(this, IDSelector);

    _this5 = _super5.call(this, adapter, expression);

    _this5.processExpression(expression);

    return _this5;
  }

  _createClass(IDSelector, [{
    key: "processExpression",
    value: function processExpression(expression) {
      var idx = expression.indexOf('#');
      this.expression = expression.slice(idx + 1);
    }
  }, {
    key: "match",
    value: function match(element) {
      if (!this.adapter.isTagElement(element)) return false; //TODO: ID validation

      return this.expression == this.adapter.attributes(element).id;
    }
  }]);

  return IDSelector;
}(AtomSelector);

var PseudoClassSelector = /*#__PURE__*/function (_AtomSelector6) {
  _inherits(PseudoClassSelector, _AtomSelector6);

  var _super6 = _createSuper(PseudoClassSelector);

  function PseudoClassSelector(adapter, expression) {
    _classCallCheck(this, PseudoClassSelector);

    return _super6.call(this, adapter, expression);
  }

  _createClass(PseudoClassSelector, [{
    key: "match",
    value: function match(element) {
      if (!this.adapter.isTagElement(element)) return false; //return expression == adapter.name(element);
    }
  }]);

  return PseudoClassSelector;
}(AtomSelector);